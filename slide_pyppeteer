"""
@File    :   douyin_viedo_list_by_douyinID.py
@Contact :   18904591117

@Modify Time      @Author    @Version    @Desciption
------------      -------    --------    -----------
2021/8/9 9:27     shiwei      1.0       抖音网页端-根据抖音号获取视频列表
"""
import json
import re
import random
import time
import cv2
import requests, pymysql
from urllib import parse
from base64 import b64encode
from zlib import compress
import logging
import asyncio
from pyppeteer import launcher
from pyppeteer import launch
from urllib import parse
from selenium.webdriver.remote.remote_connection import LOGGER, logging
launcher.DEFAULT_ARGS.remove("--enable-automation")

class AtomExecutor():
    name = 'douyin_web'

    def __init__(self):
        """
        初始化
        :return:
        """
        LOGGER.setLevel(logging.INFO)
        self.logger = logging.getLogger()
        self.main_list = []
        self.movie_name = ''

    async def main(self, url):
        """
        加载搜索网页,通过搜索抖音id来拦截信息获取个人视频主页url
        :param url:
        :return:
        """
        browser = await launch(
            {'headless': False,
             'args': ['--no-sandbox', '--start-maximized', '--disable-gpu',
                      '--disable-blink-features=AutomationControlled'], })
        page = await browser.newPage()
        await page.setUserAgent(self.get_UA())
        await page.setViewport(viewport={"width": 1920, "height": 1080})
        await page.setJavaScriptEnabled(enabled=True)
        await page.evaluate(
            '''() =>{ Object.defineProperties(navigator,{ webdriver:{ get: () => false } }) }''')
        # 拦截请求
        page.on("response", lambda req: asyncio.ensure_future(self.intercept_sec_id_response(req)))
        try_url_time = 3
        while try_url_time > 0:
            try:
                await asyncio.wait_for(page.goto(url), timeout=10)
                print('搜索页加载网页成功')
            except Exception as e:
                print('搜索页加载网页超时')
            if page.url == 'https://www.douyin.com/home':
                try_url_time -= 1
            else:
                break
        # 判断是否有滑动验证码
        await self.slide_handle(page)
        # 判断有无搜索出来的数据
        time.sleep(5)
        await browser.close()



    async def intercept_sec_id_response(self, interceptedRequest):
        """
        拦截信息包，返回个人主页url
        :param interceptedRequest:
        :return:
        """
        if 'https://www.douyin.com/aweme/v1/web/search/item/?device_platform=webapp' in interceptedRequest.url and 'search_channel=aweme' in interceptedRequest.url:
            response = await interceptedRequest.text()
            print('拦截到包')
            self.handle(response)

    def handle(self, response):
        """
        处理拦截包中视频信息
        :param response:
        :return:
        """
        print('传到后台处理')
        try:
            response = json.loads(response)
            for data in response['data']:
                item = dict()
                item['movie_name'] = self.movie_name
                item['movie_id'] = self.mysql_search_movie_id(self.movie_name)
                item['video_url'] = 'https://www.douyin.com/video/' + data['aweme_info']['aweme_id']
                item['video_title'] = data['aweme_info']['desc']
                item['video_introduction'] = data['aweme_info']['desc']
                item['video_from'] = 'DouYin'
                item['video_social'] = data['aweme_info']['statistics']['digg_count']
                self.mysql_interactive(item)
        except Exception as e:
            print(e)
            print('拦截包中,搜索视频列表出错')


    def process_item(self):
        sum = 0
        try:
            movie_list = self.mysql_search()
            for movie in movie_list:
                self.movie_name = movie
                print(self.movie_name)
                sum += 1
                print(sum)
                asyncio.get_event_loop().run_until_complete(self.main('https://www.douyin.com/search/{}?publish_time=0&sort_type=1&source=tab_search&type=video'.format(str(movie))))
            self.mysql_interactive(item=dict(), remnant=True)
        except Exception as e:
            self.logger.info(e)

    async def slide_handle(self, page):
        slide_try_time = 10
        while slide_try_time > 0:
            time.sleep(5)
            page_source = await page.content()
            if '请完成下列验证后继续' in page_source:
                print('检测到滑块')
                img_url_data = \
                    re.findall('<div class="captcha_verify_img--wrapper(.*?)<div id="verify-points">',
                               page_source)[0]
                img_url_list = re.findall('src="(.*?)"', img_url_data)
                background = requests.get(img_url_list[0])
                with open('background.png', 'wb') as f:
                    f.write(background.content)
                print('背景图片保存成功')
                gap = requests.get(img_url_list[1])
                with open('gap.png', 'wb') as f:
                    f.write(gap.content)
                print('缺口图片保存成功')
                try:
                    await self.try_validation(page, self.know_png_posi())
                except Exception as e:
                    self.logger.info(e)
                    print('滑动尝试次数{}'.format(str(slide_try_time)))
                    slide_try_time -= 1
            else:
                print('没有滑块')
                slide_try_time = 0
                break

    async def try_validation(self, page, distance):
        self.logger.info('开始滑动')
        await page.hover('.secsdk-captcha-drag-icon')
        await page.mouse.down()
        all_distance = 793 + distance + 30
        distance_list = self.slide_list(all_distance)
        now_distance = 0
        self.logger.info(all_distance)
        self.logger.info(distance_list)
        for dis in distance_list[:-1]:
            now_distance += dis
            await page.mouse.move(now_distance, 763, options={'steps': 1})
            time.sleep(0.1)
        await page.mouse.move(all_distance, 763, options={'steps': 1})
        await page.mouse.up()

    @staticmethod
    def slide_list(total_length):
        '''
        拿到移动轨迹，模仿人的滑动行为，先匀加速后匀减速
        匀变速运动基本公式：
        ①v=v0+at
        ②s=v0t+½at²
        ③v²-v0²=2as
        :param total_length: 需要移动的距离
        :return: 每段移动的距离列表
        '''
        v = 0
        t = 1
        slide_result = []
        current = 0
        mid = total_length * 4 / 5

        while current < total_length:
            if current < mid:
                a = 3
            else:
                a = -4
            v0 = v
            s = v0 * t + 0.5 * a * (t ** 2)
            current += s
            slide_result.append(round(s))
            v = v0 + a * t
        return slide_result

    def know_png_posi(self):
        # 读取背景图片和缺口图片
        bg_img = cv2.imread('background.png', 0)  # 背景图片
        tp_img = cv2.imread('gap.png', 0)  # 缺口图片
        # 识别图片边缘
        bg_edge = cv2.Canny(bg_img, 100, 200)
        tp_edge = cv2.Canny(tp_img, 100, 200)
        # 转换图片格式
        bg_pic = cv2.cvtColor(bg_edge, cv2.COLOR_GRAY2RGB)
        tp_pic = cv2.cvtColor(tp_edge, cv2.COLOR_GRAY2RGB)
        # 缺口匹配
        res = cv2.matchTemplate(bg_pic, tp_pic, cv2.TM_CCOEFF_NORMED)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)  # 寻找最优匹配
        X = max_loc[0]   #max_loc 为缺口左上角坐标，应该得乘以系数0.62来操纵滑动
        return X * 0.62

    def mysql_interactive(self, item, remnant=False):
        """
        插入mysql中的操作
        :param item: 字典型，为单条数据
        :param remnant: boolean型，处理剩余数据
        :return:
        """
        # 群体插入
        if remnant is False:
            self.main_list.append(item)
        if len(self.main_list) >= 100 or remnant is True:
            db = pymysql.connect(host='localhost', user='root', password='sw106666', port=3306, db='影院搜索引擎',
                                 charset='utf8mb4')
            cursor = db.cursor()
            data = (tuple(cinema.values()) for cinema in self.main_list)
            values_sum = ', '.join(['%s'] * 7)
            sql = 'insert into 舆情_抖音 values({})'.format(values_sum)
            cursor.executemany(sql, data)
            db.commit()
            cursor.close()
            db.close()
            self.main_list = []

    def mysql_search_movie_id(self, movie_name):
        db = pymysql.connect(host='localhost', user='root', password='sw106666', port=3306, db='影院搜索引擎', charset='utf8mb4')
        cursor = db.cursor()
        sql = 'select movie_id from 影院票房 where movie_name = "' + movie_name + '"'
        try:
            cursor.execute(sql)
            results = cursor.fetchall()
            cursor.close()
            db.close()
            return results[0][0]
        except:
            print('查询出错')

    def mysql_search(self):
        db = pymysql.connect(host='localhost', user='root', password='sw106666', port=3306, db='影院搜索引擎', charset='utf8mb4')
        cursor = db.cursor()
        sql = "select movie_name from 影院票房"
        try:
            cursor.execute(sql)
            results = cursor.fetchall()
            cursor.close()
            db.close()
            return list(set([id[0] for id in results]))
        except:
            print('查询出错')

    def get_UA(self):
        user_agent = [
            "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50",
            "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0",
            "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3; rv:11.0) like Gecko",
            "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1",
            "Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1",
            "Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11",
            "Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World)",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser)",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)",
            "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5",
            "Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5",
            "Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5",
            "Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",
            "MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",
            "Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10",
            "Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13",
            "Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+",
            "Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0",
            "Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124",
            "Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)",
            "Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999",
            "Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25",
        ]
        return random.choice(user_agent)

if __name__ == '__main__':
    AtomExecutor().process_item()
